# 1. afrunding
x <- sapply(x, nedrund)
# nomiel reduktion
nomiel <- rep.int(pct, length(x))
# reel efter 2. afrunding
reel <- sapply(x, red.ned.pct.2013)
data.frame(x, nomiel, reel)
}
reduc.2015 <- function(x){
if (x == 0)
ret <- 0
else if (x < 500000)
ret <- x * (1-pct*2)
else if (x < 750000)
ret <- (500000 * (1-pct*2)) + (x-500000) * (1-pct)
else if (x < 1250000)
ret <- (500000 * (1-pct*2)) + (x-500000) * (1-pct) + (x-750000 - ((x-750000) %% 50000))/50000 * 1250
else
ret <- x * (1-pct)
ret
}
reduc.nedrund.2015 <- function(x) nedrund(reduc.2015(x))
red.ned.pct.2015 <- function(x) 1-reduc.nedrund.2015(x)/x
nom.pct.2015 <- function(x) 1-reduc.2015(x)/x
model.data.frame.2015 <- function(start, slut, interval){
# dan ejdvÃ¦rdier
x <- seq(start, slut, interval)
# 1. afrunding
x <- sapply(x, nedrund)
# nomiel reduktion
nomiel <- sapply(x, nom.pct.2015)
# reel efter 2. afrunding
reel <- sapply(x, red.ned.pct.2015)
data.frame(x, nomiel, reel)
}
df <- model.data.frame.2015(10000, 2000000, 1000)
source("reel_reduktion.R")
ggplot(df, aes(x/1000)) +
geom_step(aes(y=nomiel*100, colour="nomiel")) +
geom_step(aes(y=reel*100, colour="reel")) +
scale_colour_manual("legend", breaks = c("nomiel", "reel"), values=c("red","blue")) +
ggtitle("nomiel og reel reduktion for ejendomsvÃ¦rdi i 2015") +
xlab("ejendomsvÃ¦rdi i tusinde") + ylab("reduktions pct") +
ylim(0,10) +
theme(legend.justification = c(1, 1), legend.position = c(1,1))
library(shiny); print(source('kommuner/app3.R')$value)
runApp('kommuner')
runApp('kommuner')
library(shiny)
library(leaflet)
?leaflet
runApp('test shiny leaflet html/test')
runApp('test shiny leaflet html/test')
runApp('test shiny leaflet html/test')
runApp('test shiny leaflet html/test')
runApp('test shiny leaflet html/test')
runApp('test shiny leaflet html/test')
shiny::runApp('test shiny leaflet html/test')
runApp('test/shiny_leaflet_ie')
library(devtools)
install_github("rstudio/leaflet")
install_github("rstudio/leaflet")
install.packages("scales")
install.packages("scales")
install_github("rstudio/leaflet")
library(devtools)
install_github("rstudio/leaflet")
shiny::runApp('test/shiny_leaflet_ie')
library("httr")
library("XML")
library("stringr")
library("ggplot2")
library("reshape2")
URL.emoface = 'https://api.projectoxford.ai/emotion/v1.0/recognize'
shiny::runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
?plotOutput
runApp('Microsoft api/emo')
?fluidPage
?fluidRow
?wellPanel
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
mybody = list(url ="http://i2images.imgix.net/s/64/43422764-266f150c5899e14c27ace953b3eef201.png?auto=format&crop=faces&fit=crop&ixjsv=1.1.3&q=82&w=300&h=169")
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
URL.emoface <- 'https://api.projectoxford.ai/emotion/v1.0/recognize'
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
o <- faceEMO[[1]]
mybody=list(url="http://imbo2.tv2.dk/users/editorial/images/d5b2868e-3abe-4fa8-bbb5-d11c1587b487?t[0]=tv2cropping:width=300,height=169&accessToken=8c13031b866e44ebdcd79a1f08dd0445da89c09b6fedd36aa74a61a510b98fea")
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
?content
test <- content(faceEMO)
mybody=list(url="http://i2images.imgix.net/s/64/43422764-266f150c5899e14c27ace953b3eef201.png?auto=format&crop=faces&fit=crop&ixjsv=1.1.3&q=82&w=300&h=169")
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
test <- content(faceEMO)
nrow(test)
length(test)
runApp('Microsoft api/emo')
?textInput
runApp('Microsoft api/emo')
?column
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
content(faceEMO)
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
mybody = list(url ="http://imbo2.tv2.dk/users/editorial/images/d5b2868e-3abe-4fa8-bbb5-d11c1587b487?t[0]=tv2cropping:width=300,height=169&accessToken=8c13031b866e44ebdcd79a1f08dd0445da89c09b6fedd36aa74a61a510b98fea")
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
test <- content(faceEMO)
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
mybody=list(url="http://imbo2.tv2.dk/users/editorial/images/ad799d5a-b107-4342-a710-aa858094f5a3?t[0]=tv2cropping:width=300,height=169&accessToken=2db50409ded477b32f98923d8c884723c8d646196b18761af47ec54cf9af70b9")
faceEMO = POST(
url = URL.emoface,
content_type('application/json'), add_headers(.headers = c('Ocp-Apim-Subscription-Key' = emokey)),
body = mybody,
encode = 'json'
)
length(content(faceEMO))
runApp('Microsoft api/emo')
?reactiveValues
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
library(ggplot2)
library(png)
library(grid)
img <- readPNG(system.file("img", "Rlogo.png", package="png"), TRUE)
gpp <- rasterGrob(img, interpolate=TRUE)
gpp$width <- unit(1, "npc")
gpp$height <- unit(1, "npc")
df <- data.frame(x=seq(1,2,0.01),y=seq(1,2,0.01))
ggplot(df,aes(x=x,y=y)) +
annotation_custom(gpp, xmin=1, xmax=2.5, ymin=1, ymax=1.5) +
geom_point()
runApp('Microsoft api/emo')
runApp('Microsoft api/emo')
x[]
x <- 1
x[]
x[0]
v1 <- c(2, 1, 1, 1, 1, 1, 1, 1, 0, 0)
v2 <- c(0, 2, 1, 1, 0, 0, 0, 1, 2, 1)
v12 <- v1 * v2
v12 <- v1 - v2
v12_s <- v112^2
v12_s <- v12^2
sqrt(v12_s)
sqrt(sum(v12_s))
round(sqrt(sum(v12_s)), 3)
v12_s %>% sum() %>% sqrt() %>% round(3)
library(dplyr)
v12_s %>% sum() %>% sqrt() %>% round(3)
v1n <- v1 %>% sqrt() %>% sum() %>% sqrt()
?exp
exp(v1)
?sqrt
v1^2 %>% sqrt()
norm <- function(x){
norm <- function(x){
x^2 %>% sum() %>% sqrt()
}
norm <- function(x){
x^2 %>% sum() %>% sqrt()
}
v1n <- nrom(v1)
v1n <- norm(v1)
v2n <- norm(v2)
?cos
cos(0)
cos(1)
cos(-1)
cos(2)
cos(10)
v12_cos <- v1*v2/v1n/v2n
v12_cos <- (v1*v2)/(v1n*v2n)
v12_cos <- (v1*v2)/(v1n*v2n) %>% sum()
v1/v1n * v2/v2n %>% sum()
v1/v1n * v2/v2n
(v1/v1n * v2/v2n) %>% sum()
(v1/v1n * v2/v2n) %>% sum() %>% round(3)
(v1/v1n * v2/v2n) %>% sum() %>% *-1
(v1/v1n * v2/v2n) %>% sum() %>% (*-1)
(v1/v1n * v2/v2n) %>% sum() %>% ´*´(-1)
(v1/v1n * v2/v2n) %>% sum() %>% '*'(-1)
(v1/v1n * v2/v2n) %>% sum() %>% '*'(-1) %>% '+'(1)
(v1/v1n * v2/v2n) %>% sum() %>% '*'(-1) %>% '+'(1) %>% round(3)
shiny::runApp('test shiny leaflet html/test')
library(devtools)
devtools::install_github('rstudio/leaflet')
devtools::install_github('rstudio/leaflet')
remove.packages("jsonlite", lib="~/R/win-library/3.3")
devtools::install_github('rstudio/leaflet')
install.packages(c("acepack", "BH", "ca", "car", "caret", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "fields", "GGally", "git2r", "googleVis", "HistData", "Hmisc", "installr", "knitr", "lava", "lubridate", "maptools", "numDeriv", "openssl", "packrat", "proto", "quanteda", "quantmod", "quantreg", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "reshape", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rmarkdown", "rpart.plot", "rsconnect", "RSQLite", "rversions", "shiny", "shinydashboard", "spam", "SparseM", "stringi", "stringr", "testit", "text2vec", "tibble", "tidyr", "V8", "XML", "yaml", "zoo"))
install.packages(c("acepack", "BH", "ca", "car", "caret", "chron",
install.packages(c("acepack", "BH", "ca", "car", "caret", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "fields", "GGally", "git2r", "googleVis", "HistData", "Hmisc", "installr", "knitr", "lava", "lubridate", "maptools", "numDeriv", "openssl", "packrat", "proto", "quanteda", "quantmod", "quantreg", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "reshape", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rmarkdown", "rpart.plot", "rsconnect", "RSQLite", "rversions", "shiny", "shinydashboard", "spam", "SparseM", "stringi", "stringr", "testit", "text2vec", "tibble", "tidyr", "V8", "XML", "yaml", "zoo"))
install.packages(c("acepack", "BH", "ca", "car", "caret", "chron",
install.packages(c("acepack", "BH", "ca", "car", "caret", "chron", "colorspace", "curl", "data.table", "DBI", "digest", "evaluate", "fields", "GGally", "git2r", "googleVis", "HistData", "Hmisc", "installr", "knitr", "lava", "lubridate", "maptools", "numDeriv", "openssl", "packrat", "proto", "quanteda", "quantmod", "quantreg", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "reshape", "reshape2", "rgdal", "rgeos", "rgl", "RgoogleMaps", "rmarkdown", "rpart.plot", "rsconnect", "RSQLite", "rversions", "shiny", "shinydashboard", "spam", "SparseM", "stringi", "stringr", "testit", "text2vec", "tibble", "tidyr", "V8", "XML", "yaml", "zoo"))
library(devtools)
devtools::install_github('rstudio/leaflet')
shiny::runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="e2751ffc763911840fb93680289ab213981f0530")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="fa82e3cab1b0dc638861a7dd6bab797a2dda78a6")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="d588f89b5c9effe04da502da2638d5297e0fcfd6")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="3f4720aa4ef1b3ec8b5ecd75c3294b5d756312e9")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="633778c4e4e56e197649e69751317838774a6cf1")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="5c1cc0ba4e7d875d3e7d0a80edd632dd3421095e")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="f0c2f9a56c9cd36766dc682025eb458c09093b57")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="3f4720aa4ef1b3ec8b5ecd75c3294b5d756312e9")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="f0c2f9a56c9cd36766dc682025eb458c09093b57")
runApp('test shiny leaflet html/test')
devtools::install_github('rstudio/leaflet', ref="3f4720aa4ef1b3ec8b5ecd75c3294b5d756312e9")
runApp('test shiny leaflet html/test')
install.packages(c("backports", "chron", "data.table", "digest", "e1071", "geojsonio", "HistData", "htmlTable", "lava", "maptools", "nlme", "prodlim", "quanteda", "Rcpp", "RcppArmadillo", "rgeos", "rgl", "roxygen2", "rprojroot", "RSQLite", "shiny", "tidyr", "xml2"))
library(httr)
?httr::GET
tmdb_api_key <- "60b11a3e5a5b69d04f8021f013aa9be4"
tmdb_api_token <- "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MGIxMWEzZTVhNWI2OWQwNGY4MDIxZjAxM2FhOWJlNCIsInN1YiI6IjU4OWYxMjY4OTI1MTQxMTcyZDAwZDg0ZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ldWzgFlL29-MKLUZVkSRyC7dR64AZ7ZWdktHZ4H-FqA"
tmdb_api_url <- "https://api.themoviedb.org"
tmdb_api_path <- "3/movie/550"
test <- GET(url=tmdb_api_url, path=tmdb_api_path, query=list(api_key=tmdb_api_key))
str(test)
tmdb_api_path <- "3/movie/550/76341"
test <- GET(url=tmdb_api_url, path=tmdb_api_path, query=list(api_key=tmdb_api_key))
str(test)
tmdb_api_path <- "3/movie/550"
test <- GET(url=tmdb_api_url, path=tmdb_api_path, query=list(api_key=tmdb_api_key))
str(test)
library(jsonlite)
test$status_code
test.con <- content(test)
test.con
test.con$poster_path
?content
if (http_type(test) != "application/json") {
stop("API did not return json", call. = FALSE)
}
if (http_type(test) != "application/js") {
stop("API did not return json", call. = FALSE)
}
?stop
tmdb_get <- function(path){
retur <- GET(url=tmdb_api_url, path=path, query=list(api_key=tmdb_api_key))
if (http_type(test) != "application/json") {
stop("API did not return json", call. = FALSE)
}
retur
}
test <- tmdb_get(tmdb_api_path)
tmdb_get <- function(path){
resp <- GET(url=tmdb_api_url, path=path, query=list(api_key=tmdb_api_key))
if (http_type(test) != "application/json") {
stop("API did not return json", call. = FALSE)
}
fromJSON(content(resp, "text"), simplifyVector = FALSE)
}
test <- tmdb_get(tmdb_api_path)
str(test)
test$genres
test$genres[[1]]
test$genres[[2]]
test$genres[1]
test$genres[1]$id
test$genres[[1]]$id
?cat
print.tmdb_api <- function(x, ...) {
cat("<tmdb ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
tmdb_api <- function(path){
resp <- GET(url=tmdb_api_url, path=path, query=list(api_key=tmdb_api_key))
if (http_type(test) != "application/json") {
stop("tmdb API did not return json", call. = FALSE)
}
parsed <- fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"tmdb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "tmdb_api"
)
}
test <- tmdb_api(tmdb_api_path)
tmdb_api <- function(path){
resp <- GET(url=tmdb_api_url, path=path, query=list(api_key=tmdb_api_key))
if (http_type(test) != "application/json") {
stop("tmdb API did not return json", call. = FALSE)
}
parsed <- fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"tmdb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "tmdb_api"
)
}
print.tmdb_api <- function(x, ...) {
cat("<tmdb ", x$path, ">\n", sep = "")
str(x$content)
invisible(x)
}
test <- tmdb_api(tmdb_api_path)
test <- tmdb_api(tmdb_api_path)
tmdb_api <- function(path){
resp <- GET(url=tmdb_api_url, path=path, query=list(api_key=tmdb_api_key))
if (http_type(resp) != "application/json") {
stop("tmdb API did not return json", call. = FALSE)
}
parsed <- fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"tmdb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "tmdb_api"
)
}
test <- tmdb_api(tmdb_api_path)
str(test)
test
?httr::GET
?match.arg
test <- tmdb_api(tmdb_api_path)$content
test
ua <- user_agent("http://github.com/hadley/httr")
tmdb_api <- function(path, query){
resp <- GET(url=tmdb_api_url, path=path, ua,
query=list(api_key=tmdb_api_key, query=query))
if (http_type(resp) != "application/json") {
stop("tmdb API did not return json", call. = FALSE)
}
parsed <- fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"tmdb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "tmdb_api"
)
}
tmdb_api <- function(path, query=""){
resp <- GET(url=tmdb_api_url, path=path, ua,
query=list(api_key=tmdb_api_key, query=query))
if (http_type(resp) != "application/json") {
stop("tmdb API did not return json", call. = FALSE)
}
parsed <- fromJSON(content(resp, "text"), simplifyVector = FALSE)
if (http_error(resp)) {
stop(
sprintf(
"tmdb API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
structure(
list(
content = parsed,
path = path,
response = resp
),
class = "tmdb_api"
)
}
test <- tmdb_api(tmdb_api_path)$content
test
test2 <- tmdb_api("3/search/person", "Woody Allen")
test2$content
test2$content$total_pages
test2$content$total_results
test2$content$results
len(test2$content$results)
length(test2$content$results)
?length
length(test2$content$results)
length(test2$content$results[[1]])
length(test2$content$results[[2]])
length(test2$content$results[[3]])
length(test2$content$results[[1]]$known_for)
View(print.tmdb_api)
View(tmdb_api)
View(tmdb_get)
View(tmdb_get)
View(tmdb_get)
rm(tmdb_get())
rm(tmdb_get)
getOption("blogdown.author")
library(blogdown)
?new_site
library(devtools)
library(devtools)
devtools::install_github('rstudio/blogdown')
library(blogdown)
?Sys.Date
?system.time
Sys.time()
library(dplyr)
?distinct
df <- data.frame(
x = sample(10, 100, rep = TRUE),
y = sample(10, 100, rep = TRUE)
)
nrow(df)
nrow(distinct(df))
nrow(distinct(df, x, y))
df
?plot
?axis
setwd("~/GitHub/website-hugo")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
